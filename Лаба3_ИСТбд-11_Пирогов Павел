# Формируется матрица F следующим образом: если в Е сумма чисел, больших К в нечетных столбцах в области 3 больше, чем произведение чисел по периметру в области 2,
# то поменять в Е симметрично области 1 и 2 местами, иначе С и В поменять местами несимметрично. При этом матрица А не меняется.
# После чего вычисляется выражение: ((К*A)*F+ K* F T . Выводятся по мере формирования А, F и все матричные операции последовательно.
#Вариант23_Пирогов Павел_ИСТбд-11

import random


# Вывод матрицы
def print_matrix(A):
    for i in A:
        print(i)


n, k = int(input('n =')), int(input('k ='))

# Создание матрицы А
A = []
for i in range(n):
    row = []
    for j in range(n):
        row.append(random.randint(-10,10))
    A.append(row)
print('Матрица А:')
print_matrix(A)

# Создание подматриц B C D E
B, C, D, E = [], [], [], []
for i in A[:len(A)//2]:
    row = i
    for _ in row:
        B.append(row[:len(row)//2])
        break
print('Матрица B:')
print_matrix(B)

for i in A[:len(A)//2]:
    row = i
    for _ in row:
        C.append(row[len(row)//2:])
        break
print('Матрица C:')
print_matrix(C)

for i in A[len(A)//2:]:
    row = i
    for _ in row:
        D.append(row[:len(row)//2])
        break
print('Матрица D:')
print_matrix(D)

for i in A[len(A)//2:]:
    row = i
    for _ in row:
        E.append(row[len(row)//2:])
        break
print('Матрица E:')
print_matrix(E)

# Условие для матрицы F
if sum([E[i][j] > k for i in range(n//2) for j in range(n//2) if j % 2 == 1]) > (E[0][n//4] * 2 + sum(E[i][n//2 - 1] for i in range(1, n//4)) * 2):
    for i in range(n//4):
        for j in range(n//4):
            E[i][j], E[n//4+i][n//4+j] = E[n//4+i][n//4+j], E[i][j]
else:
    C, B = B, C

# Создание матрицы F
F = [[0 for j in range(n)] for i in range(n)]
for i in range(n//2):
    for j in range(n//2):
        F[i][j] = B[i][j]
        F[i][n//2+j] = C[i][j]
        F[n//2+i][j] = D[i][j]
        F[n//2+i][n//2+j] = E[i][j]
print('F')
print_matrix(F)

# Выражение ((К*A)*F+ K* F T
kA = [[k*A[i][j] for j in range(n)] for i in range(n)]
kAF = [[sum([F[j][k]*kA[k][i] for k in range(n)]) for i in range(n)] for j in range(n)]
kFT = [[sum([F[j][k]*kA[k][i] for k in range(n)]) for i in range(n)] for j in range(n)]
result = [[kAF[i][j] + kFT[i][j] for j in range(n)] for i in range(n)]
print('Выражение ((К*A)*F+ K* F T')
print_matrix(result)
