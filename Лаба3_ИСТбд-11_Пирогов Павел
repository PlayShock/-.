# Формируется матрица F следующим образом: если в Е сумма чисел, больших К в нечетных столбцах в области 3 больше, чем произведение чисел по периметру в области 2,
# то поменять в Е симметрично области 1 и 2 местами, иначе С и В поменять местами несимметрично. При этом матрица А не меняется.
# После чего вычисляется выражение: ((К*A)*F+ K* F T . Выводятся по мере формирования А, F и все матричные операции последовательно.
#Вариант23_Пирогов Павел_ИСТбд-11

import random

def print_matrix(A):
    for i in A:
        print(i)

def swap_areas(matrix):
    for i in range(len(matrix)//2):
        for j in range(i+1,len(matrix)-(i+1)):
            matrix[i][j], matrix[j][i] = matrix[j][i] , matrix[i][j]
    return matrix

n, k = int(input('n =')), int(input('k ='))

# Создание матрицы А
A = []
for i in range(n):
    row = []
    for j in range(n):
        row.append(random.randint(-10, 10))
    A.append(row)
print('Матрица А:')
print_matrix(A)

# Создание подматриц B, C, D, E
B = [row[:n//2] for row in A[:n//2]]  # Область 1
C = [row[n//2:] for row in A[:n//2]]  # Область 2
D = [row[:n//2] for row in A[n//2:]]  # Область 3
E = [row[n//2:] for row in A[n//2:]]  # Область 4
print('Матрица B:')
print_matrix(B)
print('Матрица C:')
print_matrix(C)
print('Матрица D:')
print_matrix(D)
print('Матрица E:')
print_matrix(E)

# Условие для матрицы F
sum_area_3 = sum(A[j][i] for i in range(len(A)//2,len(A)) for j in range(len(A)-(i+1)+1,i,2))
perimeter_area_2 = 1
for i in range(len(E)//2):
    for j in range(i+1,len(E)-(i+1)):
        if i == 0 or j == i+1 or j == len(E)-(i+1)-1:
            perimeter_area_2 *= E[i][j]
if sum_area_3 > perimeter_area_2:
    swap_areas(E)
else:
    B, C = C, B

#print('Новая матрица E:')
#print_matrix(E)

# Создание матрицы F
F = [[0 for j in range(n)] for i in range(n)]
for i in range(n//2):
    for j in range(n//2):
        F[i][j] = B[i][j]
        F[i][n//2+j] = C[i][j]
        F[n//2+i][j] = D[i][j]
        F[n//2+i][n//2+j] = E[i][j]
print('Матрица F:')
print_matrix(F)

# Выражение ((К*A)*F + K*F^T)
kF = [[F[j][k]*k + F[k][j]*k for k in range(n)] for j in range(n)]
print('Выражение ((К*A)*F + K*F^T):')
print_matrix(kF)
