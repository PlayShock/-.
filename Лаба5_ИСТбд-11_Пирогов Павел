"""
Задана рекуррентная функция. Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно.
Определить границы применимости рекурсивного и итерационного подхода. Результаты сравнительного
исследования времени вычисления представить в табличной и графической форме.
F(1) = 1, F(2) = 1, F(n) = (-1)n*(F(n-2)*(n-1) /(2n)! + 2), при n > 2
"""
import matplotlib.pyplot as plt
import time


def fact(n, current=0, acc=1):
    if current == n:
        return acc
    else:
        return fact(n, current + 1, acc * (current + 1))


#print(fact(2*3))

sign = 1
def recurs_f(n):
    global sign
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        sign *= -1
        return sign * (recurs_f(n - 2) * (n - 1) / fact(2*n) + 2)


#n = int(input())
#print(recurs_f(n))

sign2 = 1
def iterat_f(n):
    global sign2
    f_minus_2 = 1
    f_minus_1 = 1
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        for i in range(3, n + 1):
            sign2 *= -1
            f = sign2 * (f_minus_2 * (i - 1) / fact(2 * i) + 2)
            f_minus_2, f_minus_1 = f_minus_1, f
        return f


#print(iterat_f(n))

n = 10
recurs_start_time = time.perf_counter()
recurs_result = recurs_f(n)
recurs_time = time.perf_counter() - recurs_start_time

iterat_start_time = time.perf_counter()
iterat_result = iterat_f(n)
iterat_time = time.perf_counter() - iterat_start_time

print('n', '  ', 'recurs_time', '  ', 'iterat_time')
for n in range(1, 30):
    recurs_start_time = time.perf_counter()
    recurs_f(n)
    recurs_time = time.perf_counter() - recurs_start_time

    iterat_start_time = time.perf_counter()
    iterat_f(n)
    iterat_time = time.perf_counter() - iterat_start_time

    print(n, '  ', round(recurs_time, 10), '  ', round(iterat_time, 10))


a = list(range(1, 11))
print(a)
recurs_times = []
iterat_times = []
for n in a:
    recurs_start_time = time.perf_counter()
    recurs_f(n)
    recurs_time = time.perf_counter() - recurs_start_time
    recurs_times.append(recurs_time)

    iterat_start_time = time.perf_counter()
    iterat_f(n)
    iterat_time = time.perf_counter() - iterat_start_time
    iterat_times.append(iterat_time)

plt.plot(a, recurs_times, label='recurs_time')
plt.plot(a, iterat_times, label='iterat_time')
plt.xlabel('n')
plt.ylabel('time')
plt.legend()
plt.show()
